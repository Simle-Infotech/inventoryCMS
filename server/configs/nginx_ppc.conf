upstream ppc_app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).
  # If Permission IS DENIED FOR SOCKET
  # https://stackoverflow.com/questions/23948527/13-permission-denied-while-connecting-to-upstreamnginx 
  server unix:/home/ppc/deploy/run/gunicorn.sock fail_timeout=0;
}
proxy_cache_path /home/ppc/deploy/cache levels=1:2 keys_zone=my_cache:10m max_size=10g 
                 inactive=60m use_temp_path=off;

 
server {
    listen   80;
    server_name 10.20.21.175 202.45.146.221 data.gandaki.gov.np;

    client_max_body_size 4G;

    # access_log /home/covid/deploy/logs/nginx/nginx-access.log;
    # error_log /home/covid/deploy/logs/nginx/nginx-error.log;
    access_log /var/log/nginx/portal-access.log;
    error_log /var/log/nginx/portal-nginx-error.log;

    location /static/ {
        expires 1y;
        proxy_cache my_cache;
        alias   /home/ppc/deploy/static/;
        add_header Cache-Control "public, no-transform";

    }
    location ~* \.(?:ico|css|js|gif|jpe?g|png|svg|ttf)$ {
        expires 1y;
        add_header Pragma public;
        add_header Cache-Control "public, no-transform";
    }
    
    location /media/ {
        expires 1y;
        proxy_cache my_cache;
        alias   /home/ppc/deploy/media/;
        add_header Cache-Control "public, no-transform";
    }
    root /home/ppc/deploy/NewFrontEndGandakiProvinceData/dist/architectui-angular-pro/;
    #index index.html; 
    location /{
        alias /home/ppc/deploy/NewFrontEndGandakiProvinceData/dist/architectui-angular-pro/;
     #   try_files $uri$args $uri$args/ /index.html;   
}
    
    location /old_site/{
	alias /home/ppc/deploy/GandakiProvinceFrontEnd/dist/;
    }
	
    location /portal/ {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://ppc_app_server;
            break;
        }
    }

    
    # ssl_certificate    /etc/ssl/certs/data_gandaki.crt; 
    # ssl_certificate_key    /etc/ssl/certs/data_gandaki.key;

    # Error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /home/ppc/deploy/static/;
    }
}
